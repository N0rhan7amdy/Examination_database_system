1. Function to calculate student's exam result
CREATE FUNCTION dbo.CalculateStudentExamResult (@student_id INT, @exam_id INT)
RETURNS FLOAT
AS
BEGIN
    DECLARE @totalDegree FLOAT;
    SELECT @totalDegree = SUM(q.degree)
    FROM StudentTakeExam ste
    JOIN QuestionsPool q ON ste.question_id = q.question_id
    WHERE ste.student_id = @student_id AND ste.exam_id = @exam_id AND ste.question_result = 1;
    RETURN @totalDegree;
END;
==================================================
2. Stored Procedure for adding a new question
CREATE PROCEDURE dbo.AddQuestion
    @question_body NVARCHAR(MAX),
    @question_type NVARCHAR(20),
    @degree FLOAT,
    @correct_answer INT
AS
BEGIN
    INSERT INTO QuestionsPool (question_body, question_type, degree, correct_answer)
    VALUES (@question_body, @question_type, @degree, @correct_answer);
END;
==================================================
3. Stored Procedure for creating an exam
CREATE PROCEDURE dbo.CreateExam
    @exam_type NVARCHAR(20),
    @exam_degree INT,
    @allowance_option BIT,
    @instructor_id INT,
    @start_time TIME,
    @end_time TIME,
    @exam_date DATE,
    @year INT,
    @course_id INT
AS
BEGIN
    DECLARE @exam_id INT;
    
    INSERT INTO Exam (exam_type, exam_degree, allowance_option)
    VALUES (@exam_type, @exam_degree, @allowance_option);

    SET @exam_id = SCOPE_IDENTITY();

    INSERT INTO InstructorMakeExam (exam_id, instructor_id, start_time, end_time, exam_date, year)
    VALUES (@exam_id, @instructor_id, @start_time, @end_time, @exam_date, @year);

    INSERT INTO CourseExam (exam_id, course_id)
    VALUES (@exam_id, @course_id);
END;
===================================================
4. Stored Procedure for student registration
CREATE PROCEDURE dbo.RegisterStudent
    @student_name NVARCHAR(50),
    @NID INT,
    @phone NVARCHAR(11),
    @age INT,
    @gender CHAR(1),
    @military_status NVARCHAR(30),
    @intake_id INT,
    @branch_id INT,
    @track_id INT
AS
BEGIN
    DECLARE @student_id INT;

    INSERT INTO Students (student_name, NID, phone, age, gender, military_status)
    VALUES (@student_name, @NID, @phone, @age, @gender, @military_status);

    SET @student_id = SCOPE_IDENTITY();

    INSERT INTO StudentIntake (student_id, intake_id)
    VALUES (@student_id, @intake_id);

    INSERT INTO StudentBranch (student_id, branch_id)
    VALUES (@student_id, @branch_id);

    INSERT INTO StudentTrack (student_id, track_id)
    VALUES (@student_id, @track_id);
END;
=================================================
5. Stored Procedure for instructor assignment
CREATE PROCEDURE dbo.AssignInstructor
    @instructor_id INT,
    @course_id INT
AS
BEGIN
    IF EXISTS (SELECT 1 FROM InstructorTeachCourse WHERE course_id = @course_id)
    BEGIN
        UPDATE InstructorTeachCourse
        SET instructor_id = @instructor_id
        WHERE course_id = @course_id;
    END
    ELSE
    BEGIN
        INSERT INTO InstructorTeachCourse (course_id, instructor_id)
        VALUES (@course_id, @instructor_id);
    END
END;
=============================================
6. Trigger to ensure the total degree of an exam does not exceed the course max degree
CREATE TRIGGER trg_ExamDegree
ON Exam
AFTER INSERT, UPDATE
AS
BEGIN
    DECLARE @exam_id INT, @course_id INT, @exam_degree INT, @max_degree FLOAT;
    SELECT @exam_id = inserted.exam_id, @exam_degree = inserted.exam_degree
    FROM inserted;
    
    SELECT @course_id = course_id
    FROM CourseExam
    WHERE exam_id = @exam_id;
    
    SELECT @max_degree = max_degree
    FROM Course
    WHERE course_id = @course_id;
    
    IF @exam_degree > @max_degree
    BEGIN
        ROLLBACK;
        THROW 50001, 'The total degree of the exam exceeds the course max degree', 1;
    END
END;
=============================================
7. Creating users and roles
-- Create roles
CREATE ROLE Admin;
CREATE ROLE TrainingManager;
CREATE ROLE Instructor;
CREATE ROLE Student;

-- Create users and assign roles
CREATE USER AdminUser WITH PASSWORD = 'AdminPassword';
CREATE USER TrainingManagerUser WITH PASSWORD = 'TrainingManagerPassword';
CREATE USER InstructorUser WITH PASSWORD = 'InstructorPassword';
CREATE USER StudentUser WITH PASSWORD = 'StudentPassword';

EXEC sp_addrolemember 'Admin', 'AdminUser';
EXEC sp_addrolemember 'TrainingManager', 'TrainingManagerUser';
EXEC sp_addrolemember 'Instructor', 'InstructorUser';
EXEC sp_addrolemember 'Student', 'StudentUser';

-- Assign permissions to roles
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES TO Admin;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES TO TrainingManager;
GRANT SELECT, INSERT, UPDATE, DELETE ON InstructorTeachCourse, QuestionsPool, Exam, InstructorMakeExam, InstructorSelectedStudents, CourseQuestions TO Instructor;
GRANT SELECT, INSERT ON Students, StudentTakeExam, InstructorSelectedStudents, CourseExam TO Student;
==============================================
8. Daily Backup Job (Assuming SQL Server Agent is available)
-- Create a job to perform daily backup
USE msdb;
GO

DECLARE @job_id BINARY(16);

EXEC sp_add_job
    @job_name = N'ExaminationDBDailyBackup',
    @enabled = 1,
    @description = N'Daily backup of ExaminationDB',
    @job_id = @job_id OUTPUT;

EXEC sp_add_jobstep
    @job_id = @job_id,
    @step_name = N'BackupStep',
    @subsystem = N'TSQL',
    @command = N'BACKUP DATABASE [ExaminationDB] TO DISK = ''E:\Backup\ExaminationDB.bak'' WITH NOFORMAT, NOINIT, NAME = ''ExaminationDB-Full Database Backup'', SKIP, NOREWIND, NOUNLOAD, STATS = 10',
    @retry_attempts = 3,
    @retry_interval = 5;

EXEC sp_add_schedule
    @job_id = @job_id,
    @name = N'DailyBackupSchedule',
    @freq_type = 4,  -- Daily
    @freq_interval = 1,
    @active_start_time = 020000;  -- 2:00 AM

EXEC sp_attach_schedule
    @job_id = @job_id,
    @schedule_id = SCOPE_IDENTITY();

EXEC sp_add_jobserver
    @job_id = @job_id,
    @server_name = N'(local)';
============================================
9. Text Question Validation Using Regex
CREATE FUNCTION dbo.ValidateTextAnswer (@student_answer NVARCHAR(MAX), @correct_answer NVARCHAR(MAX))
RETURNS BIT
AS
BEGIN
    DECLARE @result BIT;
    IF @student_answer LIKE @correct_answer
        SET @result = 1;
    ELSE
        SET @result = 0;
    RETURN @result;
END;
===============================================
10. Procedures for Adding and Editing Branch, Track, Department, Intake
-- Add new Branch
CREATE PROCEDURE dbo.AddBranch
    @branch_name NVARCHAR(50)
AS
BEGIN
    INSERT INTO Branch (branch_name)
    VALUES (@branch_name);
END;

-- Add new Track
CREATE PROCEDURE dbo.AddTrack
    @track_name NVARCHAR(50)
AS
BEGIN
    INSERT INTO Track (track_name)
    VALUES (@track_name);
END;

-- Add new Department
CREATE PROCEDURE dbo.AddDepartment
    @dept_name NVARCHAR(50)
AS
BEGIN
    INSERT INTO Department (dept_name)
    VALUES (@dept_name);
END;

-- Add new Intake
CREATE PROCEDURE dbo.AddIntake
    @intake_name NVARCHAR(30)
AS
BEGIN
    INSERT INTO Intake (intake_name)
    VALUES (@intake_name);
END;
===========================================
11. Random Selection of Questions for Exams
CREATE PROCEDURE dbo.SelectRandomQuestions
    @course_id INT,
    @mcq_count INT,
    @tf_count INT,
    @text_count INT
AS
BEGIN
    SELECT TOP (@mcq_count) question_id 
    INTO #mcq_temp
    FROM QuestionsPool 
    WHERE course_id = @course_id AND question_type = 'mcq'
    ORDER BY NEWID();
    
    SELECT TOP (@tf_count) question_id 
    INTO #tf_temp
    FROM QuestionsPool 
    WHERE course_id = @course_id AND question_type = 'true_false'
    ORDER BY NEWID();

    SELECT TOP (@text_count) question_id 
    INTO #text_temp
    FROM QuestionsPool 
    WHERE course_id = @course_id AND question_type = 'text_question'
    ORDER BY NEWID();

    SELECT question_id FROM #mcq_temp
    UNION ALL
    SELECT question_id FROM #tf_temp
    UNION ALL
    SELECT question_id FROM #text_temp;
END;
============================================
12. Creating Indexes for Better Performance
-- Indexes for Students table
CREATE INDEX idx_students_name ON Students(student_name);
CREATE INDEX idx_students_nid ON Students(NID);

-- Indexes for Course table
CREATE INDEX idx_course_name ON Course(course_name);

-- Indexes for Exam table
CREATE INDEX idx_exam_type ON Exam(exam_type);

-- Indexes for Instructor table
CREATE INDEX idx_instructor_name ON Instructor(ins_name);
=============================================
13. Additional Triggers for Data Integrity
-- Trigger to prevent deletion of a course if it has associated exams
CREATE TRIGGER trg_PreventCourseDeletion
ON Course
INSTEAD OF DELETE
AS
BEGIN
    IF EXISTS (SELECT 1 FROM CourseExam WHERE course_id IN (SELECT course_id FROM deleted))
    BEGIN
        THROW 50002, 'Cannot delete a course with associated exams', 1;
    END
    ELSE
    BEGIN
        DELETE FROM Course WHERE course_id IN (SELECT course_id FROM deleted);
    END
END;
=============================================
14. Views for Displaying Results and Search Functionality
-- View to display all courses with instructors
CREATE VIEW vw_CourseInstructors AS
SELECT c.course_id, c.course_name, i.ins_name
FROM Course c
JOIN InstructorTeachCourse itc ON c.course_id = itc.course_id
JOIN Instructor i ON itc.instructor_id = i.instructor_id;

-- View to display student exam results
CREATE VIEW vw_StudentExamResults AS
SELECT s.student_id, s.student_name, e.exam_id, e.exam_type, ste.question_id, ste.question_result
FROM Students s
JOIN StudentTakeExam ste ON s.student_id = ste.student_id
JOIN Exam e ON ste.exam_id = e.exam_id;
